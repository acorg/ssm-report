#! /usr/bin/env python3
# -*- Python -*-

import sys, os, pprint, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from seqdb import fasta as fasta_m

# ----------------------------------------------------------------------

def main(args):
    all_seqs = {}
    for src, data in ((src, load(src)) for src in args.sources):
        for name, seq in data:
            if name not in all_seqs:
                all_seqs[name] = {"seq": [seq], "src": [src]}
            elif seq not in all_seqs[name]["seq"]:
                found = False
                for seq_no in range(len(all_seqs[name]["seq"])):
                    exisiting_seq = all_seqs[name]["seq"][seq_no]
                    if seq in exisiting_seq:
                        found = True
                        break
                    elif exisiting_seq in seq:
                        all_seqs[name]["seq"][seq_no] = seq
                        found = True
                        break
                if not found:
                    module_logger.warning("diff seq {!r} in {} and {}".format(name, src, all_seqs[name]["src"]))
                    all_seqs[name]["seq"].append(seq)
                    if src not in all_seqs[name]["src"]:
                        all_seqs[name]["src"].append("? " + src)
            elif src not in all_seqs[name]["src"]:
                all_seqs[name]["src"].append(src)
    module_logger.info("{} sequences found".format(len(all_seqs)))

    report_1 = {}
    for seq_src in all_seqs.values():
        key = tuple(seq_src["src"])
        report_1.setdefault(key, 0)
        report_1[key] += 1
    key_repr = lambda key: " + ".join(key)
    key_size = max(len(key_repr(key)) for key in report_1)
    for key in sorted(report_1):
        module_logger.info("{:>6d} {}".format(report_1[key], key_repr(key))) #, key_size, ))
        if report_1[key] < 20:
            for name, seq_src in all_seqs.items():
                if tuple(seq_src["src"]) == key:
                    module_logger.info(f"      {name}")
    keys_sorted = sorted(all_seqs.keys(), key=lambda k: k.split(" | ")[1])
    for key in keys_sorted:
        for seq in all_seqs[key]["seq"]:
            print(">" + key)
            print(seq)

# ----------------------------------------------------------------------

def load(src):
    data = list(fasta_m.read_from_file(src))
    module_logger.info("{}: {}".format(src, len(data)))
    return data

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('sources', nargs="*", action='store')

    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
