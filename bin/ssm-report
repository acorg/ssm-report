#! /usr/bin/env python3
# -*- Python -*-
error Obsolete, use ssm-make

"""
ssm report maker 2019
ssm-report list - to list available commands.
"""

import sys, os, traceback
if f"{sys.version_info.major}.{sys.version_info.minor}" < "3.7": raise RuntimeError("Run script with python 3.7+")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from acmacs_base import timeit
from ssm_report.commands import process_commands

# ----------------------------------------------------------------------

def main(args):
    return check_working_dir(args.working_dir) or process_commands(commands=args.commands, verbose=args.verbose, force=args.force, open_image=args.open_image)

# ----------------------------------------------------------------------

def check_working_dir(working_dir):
    working_dir = Path(working_dir).resolve(strict=False)
    if "/results/ssm/" not in str(working_dir):
        module_logger.error("working_dir is not under results/ssm/: " + repr(str(working_dir)))
        return 2
    working_dir.mkdir(parents=True, exist_ok=True)
    os.chdir(str(working_dir))
    return 0

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
        parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)
        parser.add_argument('--force', action='store_true', dest='force', default=False, help="Force re-doing command")
        parser.add_argument('--ql', action='store_const', dest='open_image', const="quicklook", default=None, help="Quicklook image(s)")
        parser.add_argument('--open', action='store_const', dest='open_image', const="open", default=None, help="Open image(s) in Preview")

        parser.add_argument('commands', nargs='*', action='store')
        parser.add_argument('--working-dir', action='store', dest='working_dir', default=".")

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
