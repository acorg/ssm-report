#! /usr/bin/env python3

"""
Input: stdin
{
  "per-node": [...], // new transion labels: tal output
  "?per-node": [...], // previous tree transion labels
  ... // other keys ignored
}

Output: stdout
[ merged per-node elements ]
"""

import sys, json, pprint

# ----------------------------------------------------------------------

def main():
    data = json.load(sys.stdin)
    new_labels = data["per-node"]
    sort_by_node_id(new_labels)
    old_labels = data["?per-node"]
    sort_by_node_id(old_labels)
    merge(new_labels, old_labels)
    print(make_output(new_labels))

# ----------------------------------------------------------------------

def merge(new_labels, old_labels):
    # new_by_name = make_by_name(new_labels)
    old_by_name = make_by_name(old_labels)
    label_count = {}
    for en in new_labels:
        name = en["name"]
        label_count.setdefault(name, 0)
        old_entries = old_by_name.get(name)
        if old_entries and len(old_entries) > label_count[name]:
            old_entry = old_entries[label_count[name]]
            en["label"] = old_entry["label"]
        else:
            print(f""">> name not found in old_labels: {name} index {label_count[name]}""", file=sys.stderr)
        label_count[name] += 1

# ----------------------------------------------------------------------

def make_by_name(src):
    by_name = {}
    for en in src:
        by_name.setdefault(en["name"], []).append(en)
    # pprint.pprint(by_name)
    return by_name

# ----------------------------------------------------------------------

def sort_by_node_id(src):
    src.sort(key=lambda en: int(en["node_id"].split(".")[0]))

# ----------------------------------------------------------------------

def make_output(src):
    keys_order = ["name", "label", "node_id", "show", "?first", "?last", "?before first", "?after last"]
    val_width = {k: 0 for k in keys_order}
    for en in src:
        for key in keys_order:
            val_width[key] = max(val_width[key], len(make_val(en.get(key))))
    output = "[\n"
    for en in src:
        output += "            {"
        for key in keys_order:
            comma = "," if key != keys_order[-1] else ""
            value = make_val(en.get(key))
            alignment = " " * (val_width[key] - len(value) + 1)
            output += f"\"{key}\": {value}{comma}{alignment}"
        output += "},\n"
    output = output[:-2] + "\n]" # remove traling comma
    return output

# ----------------------------------------------------------------------

def make_val(src):
    return json.dumps(src)

# ======================================================================

main()
