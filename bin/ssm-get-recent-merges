#! /usr/bin/env python3
# -*- Python -*-

"""
Get recent merges from /syn/eu/ac/results/chains-202105 via sshfs
"""

import sys, os, traceback, logging, subprocess
from pathlib import Path
import acmacs

sChainsDir = Path("/syn/eu/ac/results/chains-202105")

# ----------------------------------------------------------------------

def main(args):
    if "/ac/results/ssm/" not in os.getcwd():
        raise RuntimeError("invalid current directory, must be under results/ssm")
    merges_dir = Path("merges")
    merges_dir.mkdir(exist_ok=True)
    merges_dir = merges_dir.resolve()
    for chain_dir in sChainsDir.glob("*"):
        if startswith(chain_dir.name, "h1pdm-", "h3-", "bvic-", "byam-"):
            get_merge_from(chain_dir, merges_dir=merges_dir)

# ======================================================================

def get_merge_from(chain_dir, merges_dir):
    print(f"{chain_dir.name}")
    forward_chain_dir = max(chain_dir.glob("f-*"))
    scratch_filename = max(forward_chain_dir.glob("*.scratch.ace"))
    incremental_filename = forward_chain_dir.joinpath(scratch_filename.name.replace(".scratch.", ".incremental."))
    scratch = acmacs.Chart(scratch_filename)
    incremental = acmacs.Chart(incremental_filename)
    print(f"    inc:{incremental.projection(0).stress():10.4f} scr:{scratch.projection(0).stress():10.4f}")
    if incremental.projection(0).stress() <= scratch.projection(0).stress():
        use_chart = incremental
    else:
        use_chart = scratch
    output_filename = merges_dir.joinpath(chain_dir.name + ".chain.ace")
    if not output_filename.exists() or charts_are_different(use_chart, acmacs.Chart(output_filename)):
        if (prev_filename := Path("previous", "merges", chain_dir.name + ".ace")) and prev_filename.exists():
            previous = acmacs.Chart(prev_filename)
            use_chart.orient_to(master=previous)
        # obsolete, use seqdb4 below use_chart.populate_from_seqdb()
        print(f"    exporting {output_filename}")
        use_chart.export(output_filename)
        subprocess.check_call([os.path.join(os.environ["AE_ROOT"], "bin", "seqdb-chart-populate"), str(output_filename)])
        link_filename = merges_dir.joinpath(chain_dir.name + ".ace")
        if not link_filename.exists():
            link_filename.symlink_to(output_filename.name)
    else:
        print(f"    up to date")

# ----------------------------------------------------------------------

def charts_are_different(c1, c2):
    diff = abs(c1.projection().stress() - c2.projection().stress())
    is_diff = diff > 1e-5
    # print(f"        {c1.projection().stress()} {c2.projection().stress()} -> {diff} different: {is_diff}")
    return is_diff

# ======================================================================

def startswith(name, *prefixes):
    return any(name.startswith(prefix) for prefix in prefixes)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    # parser.add_argument('--lab', action='store', dest='lab', default=None)
    # parser.add_argument('--flu', action='store', dest='flu', default=None)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    # parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', default=False)

    # parser.add_argument('target_dir', nargs=1, action='store')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
