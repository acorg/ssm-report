#! /usr/bin/env python3
# -*- Python -*-

"""
ssm/vcm report maker 2020-06
"""

import sys, os, traceback
if f"{sys.version_info.major}.{sys.version_info.minor}" < "3.7": raise RuntimeError("Run script with python 3.7+")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import vr

# ----------------------------------------------------------------------

def main(commands):
    if not args.commands:
        raise vr.Error("No commands in the command line")
    for cmd in args.commands:
        vr.command.process(cmd)

        # maker.load_setup()
        # maker.load_report()
        # elif args.commands:
        #     for cmd in args.commands:
        #         maker.do(cmd)
        # else:
        #     print(os.getcwd())

# ----------------------------------------------------------------------

def check_dir():
    expected_parent = Path(os.environ["HOME"], "ac/results/ssm")
    curdir = Path(".").resolve()
    if curdir.parent != expected_parent:
        raise vr.Error(f"invalid current dir ({curdir}), a directory under \"{expected_parent}\" expected")
    # print(curdir.parent)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--list-commands-for-helm', action='store_true', dest='list_commands_for_helm', default=False)

    parser.add_argument('commands', nargs='*', action='store')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")

    check_dir()
    if args.list_commands_for_helm:
        vr.command.list_for_helm()
    else:
        main(args.commands)
except vr.Error as err:
    logging.error(f"{err}")
    exit(1)
except Exception as err:
    logging.error(f"{err}\n{traceback.format_exc()}")
    exit(2)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
