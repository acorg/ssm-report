#! /usr/bin/env python3
# -*- Python -*-

"""
ssm/vcm report maker 2020-06
"""

import sys, os, traceback
if f"{sys.version_info.major}.{sys.version_info.minor}" < "3.7": raise RuntimeError("Run script with python 3.7+")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from ssm_report import maker

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--init', action='store', dest='init_dir', default=None)
    parser.add_argument('--list-commands-for-helm', action='store_true', dest='list_commands_for_helm', default=False)

    parser.add_argument('commands', nargs='*', action='store')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")

    if args.init_dir:
        maker.init_dir(args.init_dir)
    else:
        maker.set_working_dir()
        maker.load_setup()
        maker.load_report()
        if args.list_commands_for_helm:
            maker.list_commands_for_helm()
        elif args.commands:
            for cmd in args.commands:
                maker.do(cmd)
        else:
            print(os.getcwd())
except maker.Error as err:
    logging.error(f"{err}")
    exit(1)
except Exception as err:
    logging.error(f"{err}\n{traceback.format_exc()}")
    exit(2)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
