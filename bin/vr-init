#! /usr/bin/env python3
# -*- Python -*-

"""
ssm/vcm report initializer 2020-06
"""

import sys, os, re, datetime, shutil, subprocess, traceback, pprint
from pathlib import Path
# sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sInitialFiles = ["root-gitignore"]
sRootDir = Path("/Users/eu/ac/results/ssm")

# ----------------------------------------------------------------------

def main(dir_name, previous_name):
    if not re.match(r"^202\d-[01][0-9][0-3][0-9]-.+$", dir_name):
        raise RuntimeError(f"Invalid name format ({dir_name}), expected YYYY-MMDD-text")

    target_dir = sRootDir.joinpath(dir_name)
    previous_dir = sRootDir.joinpath(previous_name)
    if target_dir.exists():
        raise RuntimeError(f"Target dir already exists: \"{target_dir}\"")

    target_dir.mkdir(exist_ok=True)

    fields = make_fields(target_dir=target_dir, previous_dir=previous_dir)
    shutil.copy(previous_dir.joinpath(".gitignore"), target_dir)
    init_git(target_dir=target_dir)
    for patt in ["*.mapi", "*.py", "README.org", "index.html", "install-reports", "make-serum-coverage-maps", "sy"]:
        for src in previous_dir.glob(patt):
            shutil.copy(src, target_dir)

    fix_index_html(target_dir.joinpath("index.html"), fields=fields)
    fix_install_reports(target_dir.joinpath("install-reports"), fields=fields)
    fix_report_py(target_dir.joinpath("report.py"), fields=fields)
    fix_vr_mapi(target_dir.joinpath("vr.mapi"), fields=fields)

    target_dir.joinpath("custom").mkdir(exist_ok=True)

    for subdir in ["tree", "sp"]:
        target_subdir = target_dir.joinpath(subdir)
        target_subdir.mkdir(exist_ok=True)
        # for src in template_dir.joinpath(subdir).glob("*"):
        #     if not src.is_dir() and src.name not in sInitialFiles:
        #         add_file(source_pathname=src, target_dir=target_subdir, fields=fields)

    target_sp_dir = target_dir.joinpath("sp")
    for vt in ["h1", "h3", "bvic", "byam"]:
        for suff in [".tjz", ".tree.tal"]:
            target_sp_dir.joinpath(vt + suff).symlink_to(f"../tree/{vt + suff}")

# ----------------------------------------------------------------------

def make_fields(target_dir, previous_dir):
    m = re.match(r"^(\d{4})-(\d\d)(\d\d)-(.+)", target_dir.name)
    if not m:
        raise RuntimeError(f"invalid target_dir name pattern: {target_dir.name}")
    meeting_year = int(m.group(1))
    meeting_month = int(m.group(2))
    meeting_day = int(m.group(3))
    meeting_date = datetime.date(meeting_year, meeting_month, meeting_day)
    tc = m.group(4)

    if meeting_month > 6 and meeting_month < 11:
        report_hemisphere = "Southern"
        report_year = f"{meeting_year + 1}"
    else:
        report_hemisphere = "Northern"
        if meeting_month < 10:
            report_year = f"{meeting_year}/{meeting_year + 1}"
        else:
            report_year = f"{meeting_year + 1}/{meeting_year + 2}"

    if tc == "tc1":
        teleconference = "Teleconference 1"
        prev_suffix = "ssm"
    elif tc == "tc2":
        teleconference = "Teleconference 2"
        prev_suffix = "tc1"
    elif tc == "tc3":
        teleconference = "Teleconference 3"
        prev_suffix = "tc2"
    else:
        teleconference = ""
        prev_suffix = "tc2"

    time_series_start = (meeting_date - datetime.timedelta(days=30*6)).strftime("%Y-%m")
    time_series_end = meeting_date.strftime("%Y-%m")

    previous_link = target_dir.joinpath("previous")
    previous = Path("..", previous_dir.name)
    previous_link.symlink_to(previous)

    fields = {
        "dir_name": target_dir.name,

        "meeting_year": meeting_year,
        "meeting_month": meeting_month,
        "meeting_day": meeting_day,
        "meeting_date": meeting_date.strftime("%d %B %Y"),
        "report_date": meeting_date.strftime("%Y-%m-%d"),
        "report_hemisphere": report_hemisphere,
        "report_year": report_year,
        "teleconference": teleconference,

        "time_series_start": time_series_start,
        "time_series_end": time_series_end,

        "previous": str(previous)
    }
    pprint.pprint(fields)
    return fields

# ----------------------------------------------------------------------

def fix_index_html(index_html, fields):
    with index_html.open("rt") as inp:
        data = inp.read()
    title = f"WHO VCM {fields['meeting_year']} {fields['report_hemisphere'][0]}H {fields['teleconference']}   {fields['meeting_date']}"
    data = re.sub(r"<title>([^<]+)</title>", f"<title>{title}</title>", data)
    data = re.sub(r"<h1>([^<]+)</h1>", f"<h1>{title}</h1>", data)
    with index_html.open("wt") as out:
        out.write(data)

def fix_install_reports(install_reports, fields):
    with install_reports.open("rt") as inp:
        data = inp.read()
    data = re.sub(r"dtc=.*", f"dtc={install_reports.parent.name}", data)
    drf = install_reports.parent.name.split('-')
    data = re.sub(r"dr=.*", f"dr={drf[0]}-{drf[1][:2]}-{drf[1][2:]}", data)
    with install_reports.open("wt") as out:
        out.write(data)

def fix_report_py(report_py, fields):
    with report_py.open("rt") as inp:
        data = inp.read()
    data = re.sub(r"\"report_hemisphere\": \"[^\"]+\"", f"\"report_hemisphere\": \"{fields['report_hemisphere']}\"", data)
    data = re.sub(r"\"report_year\": \"[^\"]+\"", f"\"report_year\": \"{fields['report_year']}\"", data)
    data = re.sub(r"(#\s*)?\"teleconference\": \"[^\"]+\"", f"\"teleconference\": \"{fields['teleconference']}\"", data)
    data = re.sub(r"\"meeting_date\": \"[^\"]+\"", f"\"meeting_date\": \"{fields['meeting_date']}\"", data)
    with report_py.open("wt") as out:
        out.write(data)

def fix_vr_mapi(vr_mapi, fields):
    with vr_mapi.open("rt") as inp:
        data = inp.read()
    for key in ["time-series-start", "time-series-end"]:
        data = re.sub(f"\"{key}\":\s*\"[^\"]+\"", f"\"{key}\": \"{fields[key.replace('-', '_')]}\"", data)
    with vr_mapi.open("wt") as out:
        out.write(data)

# ----------------------------------------------------------------------


def init_git(target_dir):
    project_git_dir = target_dir.name + ".git"
    module_logger.info("init_git {}".format(project_git_dir))
    # remote
    if not subprocess.call("ssh albertine '[[ -f who-reports/{p}/HEAD ]]'".format(p=project_git_dir), shell=True):
        module_logger.info(f"Remote git repo exists: /syn/eu/who-reports/{project_git_dir}")
    elif not subprocess.call("ssh albertine '[[ -e who-reports/{p} ]]'".format(p=project_git_dir), shell=True):
        raise RuntimeError("albertine:who-reports/{project_git_dir} present but it is not a git repository")
    else:
        module_logger.info("Creating remote git repo")
        subprocess.check_call(f"ssh albertine 'mkdir who-reports/{project_git_dir} && cd who-reports/{project_git_dir} && git init --bare'", shell=True)

    if target_dir.joinpath(".git").is_dir():
        module_logger.info("local repository present")
    elif target_dir.joinpath(".git").exists():
        raise RuntimeError(".git exists and it is not a directory")
    else:
        subprocess.check_call(f"cd {target_dir} && git init && git add .gitignore && git commit -m 'vr-init init_git' && git remote add origin ssh://albertine/syn/eu/who-reports/{project_git_dir} && git push --set-upstream origin master", shell=True)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('name', action='store')
    parser.add_argument('previous_name', action='store')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
    main(dir_name=args.name, previous_name=args.previous_name)
# except maker.Error as err:
#     logging.error(f"{err}")
#     exit(1)
except Exception as err:
    logging.error(f"{err}\n{traceback.format_exc()}")
    exit(2)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
