#! /usr/bin/env python3
# -*- Python -*-

"""
ssm/vcm report initializer 2020-06
"""

import sys, os, re, datetime, subprocess, traceback, pprint
if f"{sys.version_info.major}.{sys.version_info.minor}" < "3.7": raise RuntimeError("Run script with python 3.7+")
from pathlib import Path
# sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sInitialFiles = ["root-gitignore"]
# ----------------------------------------------------------------------

def main(dir_name):
    if not re.match(r"^202\d-[01][0-9][0-3][0-9]-.+$", dir_name):
        raise RuntimeError(f"Invalid name format ({dir_name}), expected YYYY-MMDD-text")
    target_dir = Path("/syn/eu/ac/results/ssm", dir_name)
    # if target_dir.exists():
    #     raise RuntimeError(f"Target dir already exists: \"{target_dir}\"")

    template_dir = Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("sources/ssm-report/template-vr")
    if not template_dir.exists():
        raise RuntimeError(f"Template dir not found: \"{template_dir}\"")

    target_dir.mkdir(exist_ok=True)

    fields = make_fields(target_dir=target_dir)
    add_file(source_pathname=template_dir.joinpath("root-gitignore"), target_dir=target_dir, fields=fields, target_name=".gitignore", add_to_git=False)
    init_git(target_dir=target_dir)
    for src in template_dir.glob("*"):
        if src.name not in sInitialFiles:
            add_file(source_pathname=src, target_dir=target_dir, fields=fields)

# ----------------------------------------------------------------------

def make_fields(target_dir):
    m = re.match(r"^(\d{4})-(\d\d)(\d\d)-(.+)", target_dir.name)
    if not m:
        raise RuntimeError(f"invalid target_dir name pattern: {target_dir.name}")
    meeting_year = int(m.group(1))
    meeting_month = int(m.group(2))
    meeting_day = int(m.group(3))
    meeting_date = datetime.date(meeting_year, meeting_month, meeting_day)
    tc = m.group(4)

    if meeting_month > 6:
        report_hemisphere = "Southern"
        report_year = f"{meeting_year + 1}"
    else:
        report_hemisphere = "Northern"
        report_year = f"{meeting_year}/{meeting_year + 1}"

    if tc == "tc1":
        teleconference = "Teleconference 1"
        prev_suffix = "ssm"
    elif tc == "tc2":
        teleconference = "Teleconference 2"
        prev_suffix = "tc1"
    elif tc == "tc3":
        teleconference = "Teleconference 3"
        prev_suffix = "tc2"
    else:
        teleconference = ""
        prev_suffix = "tc2"

    time_series_start = (meeting_date - datetime.timedelta(days=30*7)).strftime("%Y-%m")
    time_series_end = (meeting_date - datetime.timedelta(days=30)).strftime("%Y-%m")

    prev_dirs = sorted(target_dir.parent.glob(f"*-{prev_suffix}"))
    # pprint.pprint(prev_dirs)
    if prev_dirs:
        previous = f"../{prev_dirs[-1].name}"
        previous_link = target_dir.joinpath("previous")
        if not previous_link.exists():
            previous_link.symlink_to(previous)
    else:
        previous = "/UNKNOWN"

    fields = {
        "dir_name": target_dir.name,

        "meeting_year": meeting_year,
        "meeting_month": meeting_month,
        "meeting_day": meeting_day,
        "meeting_date": meeting_date.strftime("%d %B %Y"),
        "report_date": meeting_date.strftime("%Y-%m-%d"),
        "report_hemisphere": report_hemisphere,
        "report_year": report_year,
        "teleconference": teleconference,

        "time_series_start": time_series_start,
        "time_series_end": time_series_end,

        "previous": previous
    }
    pprint.pprint(fields)
    return fields

# ----------------------------------------------------------------------

def add_file(source_pathname, target_dir, fields, target_name=None, add_to_git=True):
    if target_name:
        output = target_dir.joinpath(target_name)
    else:
        output = target_dir.joinpath(source_pathname.name)
    if not output.exists():
        module_logger.info(f"writing {output} <-- {source_pathname}")
        with open(output, "w") as out:
            out.write(source_pathname.open().read() % fields)
    else:
        module_logger.warning(f"{output} already exists (not overwritten)")
    if add_to_git:
        subprocess.check_call(f"cd {target_dir} && git add '{output.name}'", shell=True)

# ----------------------------------------------------------------------

def init_git(target_dir):
    project_git_dir = target_dir.name + ".git"
    module_logger.info("init_git {}".format(project_git_dir))
    # remote
    if not subprocess.call("ssh albertine '[[ -f who-reports/{p}/HEAD ]]'".format(p=project_git_dir), shell=True):
        module_logger.info("Remote git repo exists")
    elif not subprocess.call("ssh albertine '[[ -e who-reports/{p} ]]'".format(p=project_git_dir), shell=True):
        raise RuntimeError("albertine:who-reports/{project_git_dir} present but it is not a git repository")
    else:
        module_logger.info("Creating remote git repo")
        subprocess.check_call(f"ssh albertine 'mkdir who-reports/{project_git_dir} && cd who-reports/{project_git_dir} && git init --bare'", shell=True)

    if target_dir.joinpath(".git").is_dir():
        module_logger.info("local repository present")
    elif target_dir.joinpath(".git").exists():
        raise RuntimeError(".git exists and it is not a directory")
    else:
        subprocess.check_call(f"cd {target_dir} && git init && git add .gitignore && git commit -m 'vr-init init_git' && git remote add origin ssh://albertine/home/eu/who-reports/{project_git_dir} && git push --set-upstream origin master", shell=True)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('name', nargs=1, action='store')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s [%(name)s.%(funcName)s %(lineno)d]")
    main(args.name[0])
# except maker.Error as err:
#     logging.error(f"{err}")
#     exit(1)
except Exception as err:
    logging.error(f"{err}\n{traceback.format_exc()}")
    exit(2)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
